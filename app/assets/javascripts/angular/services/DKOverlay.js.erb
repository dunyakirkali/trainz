DKOverlay.prototype = new google.maps.OverlayView();
function DKOverlay(map) {
  this.speed = 0.001;
  this.time = 0.0;
  this.gmap = map;
  this.vis;
  this.group;
  this.circles = [];    
  this.pathNode;
  this.pathLength;
  this.dataLoaded = false;
}

DKOverlay.prototype.hide = function() {
  if (this.vis) {
    // The visibility property must be a string enclosed in quotes.
    this.vis.style.visibility = 'hidden';
  }
};

DKOverlay.prototype.show = function() {
  if (this.vis) {
    this.vis.style.visibility = 'visible';
  }
};

DKOverlay.prototype.addTrack = function(track) { 
  this.tracks_group = this.vis.append("svg:g").attr("class", "route");
  this.tracks_group
  .selectAll("path")
  .data(track)
  .enter()
  .append("svg:path")
  .attr("stroke", "#333")
  .attr("fill", "#EBEFF2");
  this.targetPath = d3.selectAll('.route')[0][0];
  this.pathNode = d3.select(targetPath).selectAll('path').node();
  this.pathLength = this.pathNode.getTotalLength();
  
  this.group = this.vis.append("svg:g");
  this.circles.push(this.group.append("circle").attr({ r: 10 }));
};

DKOverlay.prototype.onAdd = function() {

  this.vis = d3.select(this.getPanes().overlayLayer).append("div").attr("class", "tracks").append('svg:svg');

  var that = this;
  d3.json("<%= asset_path 'track.json' %>", function(json) {
    that.addTrack(json.features);
    that.dataLoaded = true;
    
  });
     
  google.maps.event.addListener(map, 'bounds_changed', that.draw);
  google.maps.event.addListener(map, 'center_changed', that.draw);
};

DKOverlay.prototype.draw = function() {  
  if(!this.dataLoaded) return;
  
  this.bounds = this.gmap.getBounds();
  this.xy = d3.geo.mercator().rotate([-this.bounds.getCenter().lng(),0]).scale(1).translate([0, 0]);
  this.path = d3.geo.path().projection(this.xy);
  
  var ne = this.bounds.getNorthEast(),
      sw = this.bounds.getSouthWest(),
      path = d3.geo.path().projection(this.xy),
      projection = this.xy;
          
  var p1 = projection([ne.lng(),ne.lat()]),
      p2 = projection([sw.lng(),sw.lat()]);
  
  this.tracks_group.attr('transform', 
      'scale(' + $('.tracks').width() / (p1[0]-p2[0]) + ',' + $('.tracks').height() / (p2[1] - p1[1]) + ')' +
      'translate('+(-p2[0])+','+(+p1[1])+') ');
      
      console.log($('.tracks').width() / (p1[0]-p2[0]));
      
  this.group.attr('transform', 
      // 'scale(' + $('.tracks').width() / (p1[0]-p2[0]) + ',' + $('.tracks').height() / (p2[1] - p1[1]) + ')' +
      'translate('+(-p2[0])+','+(+p1[1])+') ');
  this.vis.selectAll('path').attr('d', path);
 
  this.time += this.speed;
  var that = this;
 for(var i = 0; i < this.circles.length; i++) {
    this.circles[i].attr({
      fill: "#a32",
      transform: function () {
        var nT = that.time;
        nT = nT - Math.floor(nT);
        var p = that.pathNode.getPointAtLength(that.pathLength * nT);
        var isoX = p.x;
        var isoY = p.y;
        return "translate(" + [isoX, isoY] + ")";
      }
    });//.attr('transform', 'translate('+(-p2[0])+','+(+p1[1])+') ');
  }
  
};

DKOverlay.prototype.onRemove = function() {  
  // this.vis.parentNode.removeChild(this.vis);
  // this.vis = null;
  // this.setMap(null);
};

trainzApp.factory('DKOverlay', function ($rootScope) {
  return DKOverlay;
});